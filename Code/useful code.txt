rows, cols, grid, enemy_pieces, own_pieces, goals = parse('/Public Testcases/1.txt')

initialized_state = State(rows, cols, grid, enemy_pieces, own_pieces, goals)

initialized_state.get_board().print_grid()

for k, v in initialized_state.get_threatened_squares().items():
	print(f'{k[0], chr(97 + k[1])}: {[x.get_name() for x in v]}')

for x in initialized_state.get_enemies():
	print(f'{x.get_name()} is at {x.get_position()}.')
	for y in x.get_actionables():
		print(f'{x.get_name()} can move to {y}\n')

result = search(rows, cols, grid, enemy_pieces, own_pieces, goals)

for piece in state.get_pieces():
	print(f'{piece.get_name()}: {piece.get_actionables()}\n')

for k, v in state.get_threatened().items():
	print(f'{k}: {v}\n')
rows, cols, grid, pieces, k = parse("Code\\Public Testcases\\Local3.txt")
state = State(rows, cols, grid, pieces, k)

search(rows, cols, grid, pieces, k)

print(value)
print(f'{piece.get_position()}: {piece.get_name()}')
print(curr_node.get_threatened())

print(curr_node.get_length())
print(curr_node.get_value())
for coordinates, p in curr_node.get_threatened().items():
        print(f'{coordinates}:{p}')


rows, cols, grid, num_pieces = parse("Code\\Public Testcases\\CSP1.txt")
result = search(rows, cols, grid, num_pieces)
state = State(rows, cols, grid, num_pieces)
for k, v in result.items():
	state.board.update_grid(Piece(v), (k[1], ord(k[0])-97))
state.board.print_grid()

print(f'coord = {coord}')
print(f'Before {curr_node.get_available()[each_piece]}')
print(f'After {curr_node.get_available()[each_piece]}')

os.chdir("Code\\Adverserial Search")

studentAgent(gameboard)
state = State(Board(white_pieces, black_pieces))
state.king_safety_evaluation("White")

tc6 = {("a", 3): ("Pawn", "White"), ("b", 3):("Pawn", "White"), ("c", 4): ("Pawn", "White"), ("a", 6):("King", "Black"), ("g", 0):("King", "White")}
tc7 = {('b', 3): ('Rook', 'White'), ('c', 4): ('Rook', 'White'), ('a', 6): ('King', 'Black'), ('g', 0): ('King', 'White')}
tc8 = {('b', 3): ('Rook', 'Black'), ('c', 4): ('Rook', 'Black'), ('a', 6): ('King', 'White'), ('g', 0): ('King', 'Black')}
white_pieces = {}
black_pieces = {}
for pos, piece in tc7.items():
        tag = piece[1]
        pos = (pos[1], ord(pos[0])-97)
        if tag == "White":
            new_piece = Piece(piece[0], pos, "White")
            white_pieces[new_piece] = pos
        else:
            new_piece = Piece(piece[0], pos, "Black")
            black_pieces[new_piece] = pos

state = State(Board(white_pieces, black_pieces))
state.get_white_movements()
state.get_black_movements()